name: CI Pipeline de Calidad y Pruebas

on:
  push:
    branches:
      - main  # Se activa al hacer push a 'main'
  pull_request:
    branches:
      - main  # Se activa para cualquier PR dirigida a 'main'

jobs:
  build-and-test:
    runs-on: ubuntu-latest  # Ejecuta el trabajo en un entorno Linux

    steps:
    - name: ⬇️ Checkout del Código
      uses: actions/checkout@v4

    - name: 🐍 Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'  # Define la versión de Python

    - name: ⚡ Instalar uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: 📥 Instalar Dependencias
      run: |
        cd Backend
        uv sync  # Instala las dependencias de producción y desarrollo (incluyendo tests y linters)
        
    - name: 📐 Formateo con autopep8 (Verificación)
      # Ejecuta autopep8 solo para verificar si hay cambios de formato pendientes.
      # Si hay cambios no guardados, el CI falla y el desarrollador debe aplicar el formato localmente.
      run: |
        cd Backend
        uv run autopep8 --exit-code --diff --recursive .

    - name: ⚡ Linting Rápido con ruff
      # Ruff es un linter extremadamente rápido que reemplaza a flake8 y otros.
      run: |
        cd Backend
        uv run ruff check .

    - name: 🔎 Verificación de Tipos con mypy
      # mypy es crucial para FastAPI ya que asegura la consistencia de tipos.
      run: |
        cd Backend
        uv run mypy .

    - name: 🧪 Ejecutar Pruebas con pytest
      # Ejecuta todas las pruebas unitarias y de integración.
      # Se asume que las dependencias de la DB de prueba (si las hay) están configuradas.
      run: |
        cd Backend
        uv run pytest
        
    # --- Etapa opcional de Construcción de Docker (Fin de CI) ---

    - name: 🐳 Construir Imagen Docker (Artefacto de CI)
      # Construye la imagen solo para verificar que el Dockerfile funciona con el código actual.
      run: |
        docker build -t fastapi-app:latest .